<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Main.java" />
              <option name="originalContent" value="//TIP To &lt;b&gt;Run&lt;/b&gt; code, press &lt;shortcut actionId=&quot;Run&quot;/&gt; or&#10;// click the &lt;icon src=&quot;AllIcons.Actions.Execute&quot;/&gt; icon in the gutter.&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        //TIP Press &lt;shortcut actionId=&quot;ShowIntentionActions&quot;/&gt; with your caret at the highlighted text&#10;        // to see how IntelliJ IDEA suggests fixing it.&#10;        System.out.printf(&quot;Hello and welcome!&quot;);&#10;&#10;        for (int i = 1; i &lt;= 5; i++) {&#10;            //TIP Press &lt;shortcut actionId=&quot;Debug&quot;/&gt; to start debugging your code. We have set one &lt;icon src=&quot;AllIcons.Debugger.Db_set_breakpoint&quot;/&gt; breakpoint&#10;            // for you, but you can always add more by pressing &lt;shortcut actionId=&quot;ToggleLineBreakpoint&quot;/&gt;.&#10;            System.out.println(&quot;i = &quot; + i);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="//TIP To &lt;b&gt;Run&lt;/b&gt; code, press &lt;shortcut actionId=&quot;Run&quot;/&gt; or&#10;// click the &lt;icon src=&quot;AllIcons.Actions.Execute&quot;/&gt; icon in the gutter.&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        Hotel hotel = new Hotel();&#10;        hotel.zeigeAlleZimmer();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Zimmer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Zimmer.java" />
              <option name="originalContent" value="import java.util.*;&#10;&#10;public class Zimmer {&#10;    private int zimmernummer;&#10;    private zimmerTyp typ;&#10;    private boolean belegt;&#10;    private List&lt;String&gt; ausstattung;&#10;&#10;    public Zimmer(int zimmernummer, zimmerTyp typ, List&lt;String&gt; ausstattung) {&#10;        this.zimmernummer = zimmernummer;&#10;        this.typ = typ;&#10;        this.ausstattung = ausstattung;&#10;        this.belegt = false;&#10;    }&#10;&#10;    public int getZimmernummer() { return zimmernummer; }&#10;    public zimmerTyp getTyp() { return typ; }&#10;    public boolean isBelegt() { return belegt; }&#10;    public void setBelegt(boolean belegt) { this.belegt = belegt; }&#10;    public List&lt;String&gt; getAusstattung() { return ausstattung; }&#10;&#10;    public int getMaxPersonen() { return typ.getMaxPersonen(); }&#10;    public double getPreisProNacht() { return typ.getPreisProNacht(); }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Zimmer &quot; + zimmernummer + &quot; (&quot; + typ + &quot;) - max. Personen: &quot; + getMaxPersonen() +&#10;                &quot;, Preis/Nacht: &quot; + getPreisProNacht() + &quot;€, belegt: &quot; + belegt;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import java.util.*;&#10;&#10;public class Zimmer {&#10;    private int zimmernummer;&#10;    private zimmerTyp typ;&#10;    private boolean belegt;&#10;    private boolean reserviert;&#10;    private String reservierterGast;&#10;    private List&lt;String&gt; ausstattung;&#10;&#10;    public Zimmer(int zimmernummer, zimmerTyp typ, List&lt;String&gt; ausstattung) {&#10;        this.zimmernummer = zimmernummer;&#10;        this.typ = typ;&#10;        this.ausstattung = ausstattung;&#10;        this.belegt = false;&#10;        this.reserviert = false;&#10;        this.reservierterGast = null;&#10;    }&#10;&#10;    public int getZimmernummer() { return zimmernummer; }&#10;    public zimmerTyp getTyp() { return typ; }&#10;    public boolean isBelegt() { return belegt; }&#10;    public void setBelegt(boolean belegt) { this.belegt = belegt; }&#10;    public boolean isReserviert() { return reserviert; }&#10;    public String getReservierterGast() { return reservierterGast; }&#10;    public void reservieren(String gastName) {&#10;        this.reserviert = true;&#10;        this.reservierterGast = gastName;&#10;    }&#10;    public void stornieren() {&#10;        this.reserviert = false;&#10;        this.reservierterGast = null;&#10;    }&#10;    public List&lt;String&gt; getAusstattung() { return ausstattung; }&#10;&#10;    public int getMaxPersonen() { return typ.getMaxPersonen(); }&#10;    public double getPreisProNacht() { return typ.getPreisProNacht(); }&#10;&#10;    @Override&#10;    public String toString() {&#10;        String status = belegt ? &quot;belegt&quot; : (reserviert ? &quot;reserviert für &quot; + reservierterGast : &quot;frei&quot;);&#10;        return &quot;Zimmer &quot; + zimmernummer + &quot; (&quot; + typ + &quot;) - max. Personen: &quot; + getMaxPersonen() +&#10;                &quot;, Preis/Nacht: &quot; + getPreisProNacht() + &quot;€, Status: &quot; + status;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>