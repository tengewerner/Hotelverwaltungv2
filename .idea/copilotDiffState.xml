<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Hotel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Hotel.java" />
              <option name="originalContent" value="import java.util.*;&#10;&#10;public class Hotel {&#10;    private List&lt;Zimmer&gt; zimmerListe;&#10;&#10;    public Hotel() {&#10;        zimmerListe = new ArrayList&lt;&gt;();   //Generiert automatisch 12 Zimmer, 5 EZ, 5 DZ, 2 Suiten&#10;        int nummer = 1;&#10;        for (int i = 0; i &lt; 5; i++) {&#10;            zimmerListe.add(new Zimmer(nummer++, zimmerTyp.EINZELZIMMER, zimmerTyp.EINZELZIMMER.getAusstattung()));&#10;        }&#10;        for (int i = 0; i &lt; 5; i++) {&#10;            zimmerListe.add(new Zimmer(nummer++, zimmerTyp.DOPPELZIMMER, zimmerTyp.DOPPELZIMMER.getAusstattung()));&#10;        }&#10;        for (int i = 0; i &lt; 2; i++) {&#10;            zimmerListe.add(new Zimmer(nummer++, zimmerTyp.SUITE, zimmerTyp.SUITE.getAusstattung()));&#10;        }&#10;    }&#10;&#10;    public boolean reserveZimmer(int zimmernummer, String gastName) {&#10;        for (Zimmer z : zimmerListe) {&#10;            if (z.getZimmernummer() == zimmernummer) {&#10;                if (!z.isBelegt() &amp;&amp; !z.isReserviert()) {  //Falls Zimmer !NICHT! belegt und !NICHT! reserviert&#10;                    z.reservieren(gastName);&#10;                    System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; wurde für &quot; + gastName + &quot; reserviert.&quot;);&#10;                    return true;&#10;                } else if (z.isReserviert()) {&#10;                    System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; ist bereits reserviert für &quot; + z.getReservierterGast() + &quot;.&quot;);&#10;                    return false;&#10;                } else {&#10;                    System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; ist bereits belegt.&quot;);&#10;                    return false;&#10;                }&#10;            }&#10;        }&#10;        System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; existiert nicht.&quot;);&#10;        return false;&#10;    }&#10;&#10;    public void zeigeAlleZimmer() {&#10;        for (Zimmer z : zimmerListe) {&#10;            System.out.println(z.toString() + &quot;, Ausstattung: &quot; + z.getAusstattung());&#10;        }&#10;    }&#10;&#10;    public List&lt;Zimmer&gt; getZimmerListe() {&#10;&#10;        return zimmerListe;&#10;    }&#10;&#10;    public boolean checkIn(int zimmernummer) {&#10;        for (Zimmer z : zimmerListe) {&#10;            if (z.getZimmernummer() == zimmernummer) {&#10;                if (!z.isBelegt()) {&#10;                    z.setBelegt(true);&#10;                    System.out.println(&quot;Check-in erfolgreich für Zimmer &quot; + zimmernummer);&#10;                    return true;&#10;                } else {&#10;                    System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; ist bereits belegt.&quot;);&#10;                    return false;&#10;                }&#10;            }&#10;        }&#10;        System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; existiert nicht.&quot;);&#10;        return false;&#10;    }&#10;&#10;    public boolean checkOut(int zimmernummer) {&#10;        for (Zimmer z : zimmerListe) {&#10;            if (z.getZimmernummer() == zimmernummer) {&#10;                if (z.isBelegt()) {&#10;                    z.setBelegt(false);&#10;                    z.stornieren();&#10;                    if (!z.getVerpflegung().isEmpty()) {&#10;                        Verpflegung[] alleVerpflegung = z.getVerpflegung().toArray(new Verpflegung[0]);&#10;                        z.storniereVerpflegung(alleVerpflegung);&#10;                    }&#10;                    System.out.println(&quot;Check-out erfolgreich für Zimmer &quot; + zimmernummer + &quot;. Reservierung und Verpflegung wurden entfernt.&quot;);&#10;                    return true;&#10;                } else {&#10;                    System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; ist bereits frei.&quot;);&#10;                    return false;&#10;                }&#10;            }&#10;        }&#10;        System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; existiert nicht.&quot;);&#10;        return false;&#10;    }&#10;&#10;    public boolean bucheVerpflegung(int zimmernummer, Verpflegung... verpflegungen) {&#10;        for (Zimmer z : zimmerListe) {&#10;            if (z.getZimmernummer() == zimmernummer) {&#10;                if (!z.isBelegt()) {&#10;                    System.out.println(&quot;Verpflegung kann nur gebucht werden, wenn das Zimmer belegt ist.&quot;);&#10;                    return false;&#10;                }&#10;                z.bucheVerpflegung(verpflegungen);&#10;                System.out.println(&quot;Verpflegung &quot; + Arrays.toString(verpflegungen) + &quot; für Zimmer &quot; + zimmernummer + &quot; gebucht.&quot;);&#10;                return true;&#10;            }&#10;        }&#10;        System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; existiert nicht.&quot;);&#10;        return false;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import java.util.*;&#10;&#10;public class Hotel {&#10;    private List&lt;Zimmer&gt; zimmerListe;&#10;    private List&lt;Bewertung&gt; bewertungen = new ArrayList&lt;&gt;();&#10;&#10;    public Hotel() {&#10;        zimmerListe = new ArrayList&lt;&gt;();   //Generiert automatisch 12 Zimmer, 5 EZ, 5 DZ, 2 Suiten&#10;        int nummer = 1;&#10;        for (int i = 0; i &lt; 5; i++) {&#10;            zimmerListe.add(new Zimmer(nummer++, zimmerTyp.EINZELZIMMER, zimmerTyp.EINZELZIMMER.getAusstattung()));&#10;        }&#10;        for (int i = 0; i &lt; 5; i++) {&#10;            zimmerListe.add(new Zimmer(nummer++, zimmerTyp.DOPPELZIMMER, zimmerTyp.DOPPELZIMMER.getAusstattung()));&#10;        }&#10;        for (int i = 0; i &lt; 2; i++) {&#10;            zimmerListe.add(new Zimmer(nummer++, zimmerTyp.SUITE, zimmerTyp.SUITE.getAusstattung()));&#10;        }&#10;    }&#10;&#10;    public boolean reserveZimmer(int zimmernummer, String gastName) {&#10;        for (Zimmer z : zimmerListe) {&#10;            if (z.getZimmernummer() == zimmernummer) {&#10;                if (!z.isBelegt() &amp;&amp; !z.isReserviert()) {  //Falls Zimmer !NICHT! belegt und !NICHT! reserviert&#10;                    z.reservieren(gastName);&#10;                    System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; wurde für &quot; + gastName + &quot; reserviert.&quot;);&#10;                    return true;&#10;                } else if (z.isReserviert()) {&#10;                    System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; ist bereits reserviert für &quot; + z.getReservierterGast() + &quot;.&quot;);&#10;                    return false;&#10;                } else {&#10;                    System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; ist bereits belegt.&quot;);&#10;                    return false;&#10;                }&#10;            }&#10;        }&#10;        System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; existiert nicht.&quot;);&#10;        return false;&#10;    }&#10;&#10;    public void zeigeAlleZimmer() {&#10;        for (Zimmer z : zimmerListe) {&#10;            System.out.println(z.toString() + &quot;, Ausstattung: &quot; + z.getAusstattung());&#10;        }&#10;    }&#10;&#10;    public List&lt;Zimmer&gt; getZimmerListe() {&#10;&#10;        return zimmerListe;&#10;    }&#10;&#10;    public boolean checkIn(int zimmernummer) {&#10;        for (Zimmer z : zimmerListe) {&#10;            if (z.getZimmernummer() == zimmernummer) {&#10;                if (!z.isBelegt()) {&#10;                    z.setBelegt(true);&#10;                    System.out.println(&quot;Check-in erfolgreich für Zimmer &quot; + zimmernummer);&#10;                    return true;&#10;                } else {&#10;                    System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; ist bereits belegt.&quot;);&#10;                    return false;&#10;                }&#10;            }&#10;        }&#10;        System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; existiert nicht.&quot;);&#10;        return false;&#10;    }&#10;&#10;    public boolean checkOut(int zimmernummer) {&#10;        for (Zimmer z : zimmerListe) {&#10;            if (z.getZimmernummer() == zimmernummer) {&#10;                if (z.isBelegt()) {&#10;                    z.setBelegt(false);&#10;                    z.stornieren();&#10;                    if (!z.getVerpflegung().isEmpty()) {&#10;                        Verpflegung[] alleVerpflegung = z.getVerpflegung().toArray(new Verpflegung[0]);&#10;                        z.storniereVerpflegung(alleVerpflegung);&#10;                    }&#10;                    System.out.println(&quot;Check-out erfolgreich für Zimmer &quot; + zimmernummer + &quot;. Reservierung und Verpflegung wurden entfernt.&quot;);&#10;                    return true;&#10;                } else {&#10;                    System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; ist bereits frei.&quot;);&#10;                    return false;&#10;                }&#10;            }&#10;        }&#10;        System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; existiert nicht.&quot;);&#10;        return false;&#10;    }&#10;&#10;    public boolean bucheVerpflegung(int zimmernummer, Verpflegung... verpflegungen) {&#10;        for (Zimmer z : zimmerListe) {&#10;            if (z.getZimmernummer() == zimmernummer) {&#10;                if (!z.isBelegt()) {&#10;                    System.out.println(&quot;Verpflegung kann nur gebucht werden, wenn das Zimmer belegt ist.&quot;);&#10;                    return false;&#10;                }&#10;                z.bucheVerpflegung(verpflegungen);&#10;                System.out.println(&quot;Verpflegung &quot; + Arrays.toString(verpflegungen) + &quot; für Zimmer &quot; + zimmernummer + &quot; gebucht.&quot;);&#10;                return true;&#10;            }&#10;        }&#10;        System.out.println(&quot;Zimmer &quot; + zimmernummer + &quot; existiert nicht.&quot;);&#10;        return false;&#10;    }&#10;&#10;    public void addBewertung(int sterne, String kommentar) {&#10;        bewertungen.add(new Bewertung(sterne, kommentar));&#10;    }&#10;&#10;    public void zeigeBewertungenStatistik() {&#10;        if (bewertungen.isEmpty()) {&#10;            System.out.println(&quot;Noch keine Bewertungen vorhanden.&quot;);&#10;            return;&#10;        }&#10;        double avg = bewertungen.stream().mapToInt(Bewertung::getSterne).average().orElse(0);&#10;        System.out.printf(&quot;Durchschnittliche Bewertung: %.2f/5\n&quot;, avg);&#10;        System.out.println(&quot;Alle Kommentare:&quot;);&#10;        for (Bewertung b : bewertungen) {&#10;            System.out.println(b);&#10;        }&#10;    }&#10;&#10;    public double berechneEinnahmen() {&#10;        double summe = 0;&#10;        for (Zimmer z : zimmerListe) {&#10;            if (z.isBelegt()) {&#10;                summe += z.getPreisProNacht();&#10;            }&#10;        }&#10;        return summe;&#10;    }&#10;&#10;    public void zeigeAuslastungProKategorie() {&#10;        int ezGesamt = 0, ezBelegt = 0;&#10;        int dzGesamt = 0, dzBelegt = 0;&#10;        int suiteGesamt = 0, suiteBelegt = 0;&#10;        for (Zimmer z : zimmerListe) {&#10;            switch (z.getTyp()) {&#10;                case EINZELZIMMER:&#10;                    ezGesamt++;&#10;                    if (z.isBelegt()) ezBelegt++;&#10;                    break;&#10;                case DOPPELZIMMER:&#10;                    dzGesamt++;&#10;                    if (z.isBelegt()) dzBelegt++;&#10;                    break;&#10;                case SUITE:&#10;                    suiteGesamt++;&#10;                    if (z.isBelegt()) suiteBelegt++;&#10;                    break;&#10;            }&#10;        }&#10;        System.out.printf(&quot;Einzelzimmer: %d/%d belegt (%.2f%%)\n&quot;, ezBelegt, ezGesamt, ezGesamt == 0 ? 0 : (ezBelegt * 100.0 / ezGesamt));&#10;        System.out.printf(&quot;Doppelzimmer: %d/%d belegt (%.2f%%)\n&quot;, dzBelegt, dzGesamt, dzGesamt == 0 ? 0 : (dzBelegt * 100.0 / dzGesamt));&#10;        System.out.printf(&quot;Suiten: %d/%d belegt (%.2f%%)\n&quot;, suiteBelegt, suiteGesamt, suiteGesamt == 0 ? 0 : (suiteBelegt * 100.0 / suiteGesamt));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>